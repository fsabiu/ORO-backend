-- =============================================================================
-- AION:OPS - ORACLE SPATIAL DATABASE SCHEMA (v2)
-- =============================================================================

-- Clean up previous installations (optional, for development)
-- Note: These DROP statements are handled by the Python script for better error handling


-- =============================================================================
-- 1. TABLE CREATION
-- =============================================================================

-- REPORTS: Stores metadata for each processing job and its results.
CREATE TABLE REPORTS (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(255 CHAR) NOT NULL, -- User-defined name for the report
    status VARCHAR2(100 CHAR), -- Processing status: pending, processing, completed, failed
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    bucket_img_path VARCHAR2(512 CHAR) NOT NULL,
    author VARCHAR2(255 CHAR) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    -- The full geographic extent of the entire GeoTIFF file.
    image_footprint SDO_GEOMETRY,
    area_of_interest SDO_GEOMETRY
);

-- RULESETS: Defines user-created rules for generating notifications.
-- These are reusable templates that can be applied to any geographic area.
CREATE TABLE RULESETS (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(255 CHAR) NOT NULL,
    description VARCHAR2(1024 CHAR),
    user_groups JSON,
    conditions JSON,
    author VARCHAR2(255 CHAR) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- DETECTIONS: Stores every individual object found during processing.
CREATE TABLE DETECTIONS (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    report_id INTEGER NOT NULL REFERENCES REPORTS(id) ON DELETE CASCADE,
    class_name VARCHAR2(100 CHAR),
    confidence NUMBER(5, 4),
    model_id VARCHAR2(255 CHAR),
    
    -- The bounding box in PIXEL coordinates relative to the original, full-sized image.
    pixel_bbox_x1 INTEGER,
    pixel_bbox_y1 INTEGER,
    pixel_bbox_x2 INTEGER,
    pixel_bbox_y2 INTEGER,

    -- The geographic footprint (polygon) of the detection's bounding box.
    footprint SDO_GEOMETRY
);

-- NOTIFICATIONS: Records triggered events when a detection matches a ruleset.
CREATE TABLE NOTIFICATIONS (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    status VARCHAR2(50 CHAR) DEFAULT 'new',
    ruleset_id INTEGER NOT NULL REFERENCES RULESETS(id),
    detection_id INTEGER NOT NULL REFERENCES DETECTIONS(id),
    priority INTEGER,
    summary CLOB,
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);


-- =============================================================================
-- 2. SPATIAL METADATA REGISTRATION (MANDATORY)
-- Tells Oracle how to interpret and index the SDO_GEOMETRY columns.
-- SRID 4326 corresponds to WGS 84 (standard latitude/longitude).
-- =============================================================================

INSERT INTO USER_SDO_GEOM_METADATA (TABLE_NAME, COLUMN_NAME, DIMINFO, SRID)
VALUES ('REPORTS', 'image_footprint', SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', -180, 180, 0.005), SDO_DIM_ELEMENT('Y', -90, 90, 0.005)), 4326);

INSERT INTO USER_SDO_GEOM_METADATA (TABLE_NAME, COLUMN_NAME, DIMINFO, SRID)
VALUES ('REPORTS', 'area_of_interest', SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', -180, 180, 0.005), SDO_DIM_ELEMENT('Y', -90, 90, 0.005)), 4326);

INSERT INTO USER_SDO_GEOM_METADATA (TABLE_NAME, COLUMN_NAME, DIMINFO, SRID)
VALUES ('DETECTIONS', 'footprint', SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', -180, 180, 0.005), SDO_DIM_ELEMENT('Y', -90, 90, 0.005)), 4326);

COMMIT;


-- =============================================================================
-- 3. INDEX CREATION (CRITICAL FOR PERFORMANCE)
-- =============================================================================

-- Spatial indexes for fast geographic queries
CREATE INDEX REPORTS_IMAGE_FOOTPRINT_IDX ON REPORTS(image_footprint) INDEXTYPE IS MDSYS.SPATIAL_INDEX_V2;
CREATE INDEX REPORTS_AREA_OF_INTEREST_IDX ON REPORTS(area_of_interest) INDEXTYPE IS MDSYS.SPATIAL_INDEX_V2;
CREATE INDEX DETECTIONS_FOOTPRINT_IDX ON DETECTIONS(footprint) INDEXTYPE IS MDSYS.SPATIAL_INDEX_V2;

-- Standard B-Tree indexes for fast queries
CREATE INDEX DETECTIONS_REPORT_ID_FK_IDX ON DETECTIONS(report_id);
CREATE INDEX REPORTS_STATUS_IDX ON REPORTS(status);
CREATE INDEX REPORTS_AUTHOR_IDX ON REPORTS(author);

-- =============================================================================
-- END OF SCRIPT
-- =============================================================================